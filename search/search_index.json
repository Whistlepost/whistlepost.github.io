{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Whistlepost is a templating engine for Web sites, that helps to manage site structure and content independently of the presentation. The goal is to provide many of the benefits of a Content Management System (CMS) without the management overhead. Often we think of modularity and encapsulation as important design principles for software that is more secure, reliable and easier to maintain. This is often expressed as a separation of concerns , which is the basis for the Whistlepost platform. Apache Sling Whistlepost is built on Apache Sling , which has a unique approach to content management in that it provides separation of not only the presentation and content but also the content structure itself. This helps to conceptualise the relationship between content and structure without being distracted by the presentation. Whilst Whistlepost shares the same origins as Adobe Experience Manager , it's focus is more aligned to the popular Jekyll template engine, which is more concerned with content rendering than lifecycle management. Whistlepost is designed to make it easy to \"drop in\" to a new or existing site to assist with the separation of the UI and content concerns. This is especially beneficial as sites grow larger and more unweildly over time, and allows both (UX/UI) designers and (content) developers to focus on what is most important to them. Features The primary focus of Whistlepost is the separation of UI and content. Whistlepost doesn't impose restrictions on how the UI is built, nor does it dictate how and where content is managed. The key features of Whistlepost include: Support for multiple template engines including JSP, Thymeleaf and HTL (Sightly) Multiple content management solutions including NoSQL (e.g. MongoDB), AWS S3, Filesystem, etc. Extensions provide additional functionality to support additional site integrations (e.g. OpenGraph, json-ld, etc.) Built for containerisation (i.e. Docker) with support for horizontal scaling and multi-tenant solutions.","title":"Introduction"},{"location":"#introduction","text":"Whistlepost is a templating engine for Web sites, that helps to manage site structure and content independently of the presentation. The goal is to provide many of the benefits of a Content Management System (CMS) without the management overhead. Often we think of modularity and encapsulation as important design principles for software that is more secure, reliable and easier to maintain. This is often expressed as a separation of concerns , which is the basis for the Whistlepost platform.","title":"Introduction"},{"location":"#apache-sling","text":"Whistlepost is built on Apache Sling , which has a unique approach to content management in that it provides separation of not only the presentation and content but also the content structure itself. This helps to conceptualise the relationship between content and structure without being distracted by the presentation. Whilst Whistlepost shares the same origins as Adobe Experience Manager , it's focus is more aligned to the popular Jekyll template engine, which is more concerned with content rendering than lifecycle management. Whistlepost is designed to make it easy to \"drop in\" to a new or existing site to assist with the separation of the UI and content concerns. This is especially beneficial as sites grow larger and more unweildly over time, and allows both (UX/UI) designers and (content) developers to focus on what is most important to them.","title":"Apache Sling"},{"location":"#features","text":"The primary focus of Whistlepost is the separation of UI and content. Whistlepost doesn't impose restrictions on how the UI is built, nor does it dictate how and where content is managed. The key features of Whistlepost include: Support for multiple template engines including JSP, Thymeleaf and HTL (Sightly) Multiple content management solutions including NoSQL (e.g. MongoDB), AWS S3, Filesystem, etc. Extensions provide additional functionality to support additional site integrations (e.g. OpenGraph, json-ld, etc.) Built for containerisation (i.e. Docker) with support for horizontal scaling and multi-tenant solutions.","title":"Features"},{"location":"2016-11-04-getting-started/","text":"Whistlepost provides a Lazybones project template that is probably the simplest way to create a new Whistlepost site. The following steps outline how to use it: Install Lazybones via SDKMAN : $ curl -s \"https://get.sdkman.io\" | bash $ source \"$HOME/.sdkman/bin/sdkman-init.sh\" && sdk install lazybones Include the Whistlepost repository in configuration: $ lazybones set bintrayRepositories = [micronode/whistlepost, pledbrook/lazybones-templates] Create a new site skeleton using the Whistlepost template: $ lazybones create whistlepost-site <site directory> Build and run your new site in Docker: $ ./gradlew buildDocker && docker run --rm -p 8080:8080 <projectId> Open site in browser: http://localhost:8080/<projectId>","title":"Getting started!"},{"location":"2018-02-27-sling-10-support/","text":"The next Whistlepost release is now based on Apache Sling 10, which was recently released . This release introduces support for Java 9 and 10 along with many more updates. Check out the release notes to find out more.","title":"Apache Sling 10 Support"},{"location":"2018-06-18-deployment-models/","text":"Whistlepost is flexible in how it may be deployed in order to support both single and multi-tenancy configurations. Single tenant Tenancy refers to how many independent sites are simultaneously hosted. A single tenant approach is the simplest deployment model, however for some use cases it may also be more expensive in terms of resources. Containerisation Single tenancy provides the best support for containerisation, in that the entire site may be published as a container image and capitalise on all the benefits of containerisation such as horizontal scaling, rolling updates and/or blue-green deployments. Multi-tenancy A multi-tenancy model provides a single whistlepost instance that hosts multiple sites concurrently. Multi-tenancy offers a greater ability to scale with less resources, however at the expense of features such as horizontal scaling of the hosted sites.","title":"Whistlepost Deployment Models"},{"location":"2018-06-18-deployment-models/#single-tenant","text":"Tenancy refers to how many independent sites are simultaneously hosted. A single tenant approach is the simplest deployment model, however for some use cases it may also be more expensive in terms of resources.","title":"Single tenant"},{"location":"2018-06-18-deployment-models/#containerisation","text":"Single tenancy provides the best support for containerisation, in that the entire site may be published as a container image and capitalise on all the benefits of containerisation such as horizontal scaling, rolling updates and/or blue-green deployments.","title":"Containerisation"},{"location":"2018-06-18-deployment-models/#multi-tenancy","text":"A multi-tenancy model provides a single whistlepost instance that hosts multiple sites concurrently. Multi-tenancy offers a greater ability to scale with less resources, however at the expense of features such as horizontal scaling of the hosted sites.","title":"Multi-tenancy"},{"location":"author/","text":"Authoring Content Editors Whilst some content can be sufficiently defined with plain text, sometimes there is a need for richer formatting and layouts. To support such content Whistlepost provides a selection of editors capable of capturing and rendering markup and rich content formats. Editor.js TBD. Prosemirror TBD. Mobiledoc TBD. Structured Content Whilst every Whistlepost site may choose to render content in unique ways, we can define some common structured metadata that is typical for a particular type of page. Using common types allows us to provide consistent formatting a layout of pages and page sections. Article A news article is typically defined to include a tile, an abstract, a cover image, and a body of text. Recipe A recipe consists of a title, an abstract, a cover image, a list of ingredients, and a method. Advertisement An advertisement may consist of a title, a thumbnail image and a full-size image. Collection A collection will consist of a title, a description, a page count (for paging resources), and a list of resources included in the collection. Sitemap TBD.","title":"Authoring"},{"location":"author/#authoring-content","text":"","title":"Authoring Content"},{"location":"author/#editors","text":"Whilst some content can be sufficiently defined with plain text, sometimes there is a need for richer formatting and layouts. To support such content Whistlepost provides a selection of editors capable of capturing and rendering markup and rich content formats.","title":"Editors"},{"location":"author/#editorjs","text":"TBD.","title":"Editor.js"},{"location":"author/#prosemirror","text":"TBD.","title":"Prosemirror"},{"location":"author/#mobiledoc","text":"TBD.","title":"Mobiledoc"},{"location":"author/#structured-content","text":"Whilst every Whistlepost site may choose to render content in unique ways, we can define some common structured metadata that is typical for a particular type of page. Using common types allows us to provide consistent formatting a layout of pages and page sections.","title":"Structured Content"},{"location":"author/#article","text":"A news article is typically defined to include a tile, an abstract, a cover image, and a body of text.","title":"Article"},{"location":"author/#recipe","text":"A recipe consists of a title, an abstract, a cover image, a list of ingredients, and a method.","title":"Recipe"},{"location":"author/#advertisement","text":"An advertisement may consist of a title, a thumbnail image and a full-size image.","title":"Advertisement"},{"location":"author/#collection","text":"A collection will consist of a title, a description, a page count (for paging resources), and a list of resources included in the collection.","title":"Collection"},{"location":"author/#sitemap","text":"TBD.","title":"Sitemap"},{"location":"publish/","text":"Publishing Content Templates Templates are used to render the content to a particular output format, such as HTML. Every content node defines a default template that is used when the content is requested. Templates may be defined in multiple languages, with the most common being JavaScript (ESP), Thymeleaf, and Groovy Markup. ESP TBD. Thymeleaf TBD. Groovy Markup TBD. Models Models provide a mechanism for accessing and validating content when rendering with templates. Whistlepost provides some common model types to represent the structured content mentioned in the authoring section. Article TBD. Recipe TBD. Advertisement TBD. Collection TBD. Static Assets Rendering content as HTML will typically require additional static files such as style documents (CSS), media (e.g. images, video, etc.), fonts and Javascript. Whistlepost manages static assets separately from the templates to allow for improved management of site assets. For example, you may choose to use a package management tool or bundler to package assets, which may require some compilation tasks as part of the buid. NPM The Node Package Manager (NPM) provides a way to easily manage your client JavaScript libraries and include them in your site static assets. Yarn may also be used in place of NPM, which provides similar functionality. Webpack A common approach is to use Webpack to package all CSS, fonts and JavaScript to a single set of files that may be referenced in the site templates.","title":"Publishing"},{"location":"publish/#publishing-content","text":"","title":"Publishing Content"},{"location":"publish/#templates","text":"Templates are used to render the content to a particular output format, such as HTML. Every content node defines a default template that is used when the content is requested. Templates may be defined in multiple languages, with the most common being JavaScript (ESP), Thymeleaf, and Groovy Markup.","title":"Templates"},{"location":"publish/#esp","text":"TBD.","title":"ESP"},{"location":"publish/#thymeleaf","text":"TBD.","title":"Thymeleaf"},{"location":"publish/#groovy-markup","text":"TBD.","title":"Groovy Markup"},{"location":"publish/#models","text":"Models provide a mechanism for accessing and validating content when rendering with templates. Whistlepost provides some common model types to represent the structured content mentioned in the authoring section.","title":"Models"},{"location":"publish/#article","text":"TBD.","title":"Article"},{"location":"publish/#recipe","text":"TBD.","title":"Recipe"},{"location":"publish/#advertisement","text":"TBD.","title":"Advertisement"},{"location":"publish/#collection","text":"TBD.","title":"Collection"},{"location":"publish/#static-assets","text":"Rendering content as HTML will typically require additional static files such as style documents (CSS), media (e.g. images, video, etc.), fonts and Javascript. Whistlepost manages static assets separately from the templates to allow for improved management of site assets. For example, you may choose to use a package management tool or bundler to package assets, which may require some compilation tasks as part of the buid.","title":"Static Assets"},{"location":"publish/#npm","text":"The Node Package Manager (NPM) provides a way to easily manage your client JavaScript libraries and include them in your site static assets. Yarn may also be used in place of NPM, which provides similar functionality.","title":"NPM"},{"location":"publish/#webpack","text":"A common approach is to use Webpack to package all CSS, fonts and JavaScript to a single set of files that may be referenced in the site templates.","title":"Webpack"},{"location":"extensions/","text":"Overview","title":"Overview"},{"location":"extensions/#overview","text":"","title":"Overview"},{"location":"releases/","text":"Release Notes","title":"Release Notes"},{"location":"releases/#release-notes","text":"","title":"Release Notes"}]}